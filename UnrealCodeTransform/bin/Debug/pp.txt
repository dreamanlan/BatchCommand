@@delimiter(script, "={:=", "=:}=");
@@include(={:=\"UnityPrefix.h\"=:}=);
@@include(={:=\"Configuration/UnityConfigure.h\"=:}=);
@@code
={:=

=:}=;
@@if(ENABLE_MONO && LOAD_MONO_DYNAMICALLY)
{
@@code
={:=

=:}=;
@@include(={:=\"MonoLoader.h\"=:}=);
@@include(={:=\"Runtime/Utilities/PathNameUtility.h\"=:}=);
@@include(={:=\"Runtime/Utilities/FileUtilities.h\"=:}=);
@@include(={:=\"Runtime/Modules/LoadDylib.h\"=:}=);
@@include(={:=\"Runtime/Mono/MonoManager.h\"=:}=);
@@code
={:=


// define a ProcPtr type for each API
=:}=;
@@define(={:=DO_API(r, n, p)   typedef r (*fp##n##Type) p;=:}=);
@@if(!defined(_MSC_VER))
{
@@code
={:=
    =:}=;
@@define(={:=DO_API_NO_RETURN(r, n, p)   typedef DOES_NOT_RETURN r (*fp##n##Type) p;=:}=);
}
@@endif();
@@include(={:=\"Runtime/Mono/MonoFunctions.h\"=:}=);
@@code
={:=

// declare storage for each API's function pointers
=:}=;
@@define(={:=DO_API(r, n, p)   fp##n##Type n = NULL;=:}=);
@@include(={:=\"Runtime/Mono/MonoFunctions.h\"=:}=);
@@code
={:=

static core::string g_MonoModulePath;
static void * g_MonoModule = NULL;

bool LoadMono(const core::string& libraryPath)
{
    g_MonoModule = LoadDynamicLibrary(libraryPath, true);

    if (!g_MonoModule)
    {
        printf_console("Unable to load mono library from %s\n", libraryPath.c_str());
        return false;
    }

    g_MonoModulePath = libraryPath;

    // Search for the functions we want by name.
    bool funcsOK = true;
=:}=;
@@define(={:=DO_API(r, n, p)   n = (fp##n##Type) LookupSymbol(g_MonoModule, #n); if( !n ) { funcsOK = false; printf_console(\"mono: function \" #n \" not found\\n\"); }=:}=);
@@define(={:=DO_API_OPTIONAL(r, n, p) n = (fp##n##Type) LookupSymbol(g_MonoModule, #n, kSymbolOptional);=:}=);
@@include(={:=\"Runtime/Mono/MonoFunctions.h\"=:}=);
@@code
={:=

    if (!funcsOK)
    {
        printf_console("mono: function lookup failed\n");
        UnloadDynamicLibrary(g_MonoModule);
        g_MonoModule = NULL;
        return false;
    }

    return true;
}

bool LoadAndInitializeMono(const dynamic_array<core::string>& monoPaths, const core::string& monoConfigPath, const core::string& dataPath, const core::string& monoDll, int argc, const char** argv, LoadMonoPreInitializationCallback preInitializationCallback)
{
    if (!LoadMono(monoDll))
        return false;

    if (preInitializationCallback != NULL && !preInitializationCallback())
        return false;

    if (!InitializeMonoFromMain(monoPaths, monoConfigPath, dataPath, argc, argv, false, monoDll.c_str()))
    {
        printf_console("mono: initialization failed\n");
        return false;
    }

    return true;
}

void UnloadMono()
{
    // dissociate function pointers
    =:}=;
@@define(={:=DO_API(r, n, p)   n = NULL;=:}=);
@@code
={:=
    =:}=;
@@include(={:=\"Runtime/Mono/MonoFunctions.h\"=:}=);
@@code
={:=

    if (g_MonoModule)
    {
        UnloadDynamicLibrary(g_MonoModule);
        g_MonoModule = NULL;
        g_MonoModulePath.clear();
    }
}

const char* GetMonoModulePath()
{
    return g_MonoModulePath.c_str();
}

=:}=;
}
@@endif();
