
@g_dir_chged : int = 0;
@g_enable_watch_point : int = 0;
@g_enable_mem_log : int = 0;
@g_run_startup : int = 0;
@g_enable_unity_obj_mem_stack_log : int = 0;
@g_enable_gcalloc_log : int = 0;

//======test code begin======
struct(TestStru3)
{
	count : int32;
	ptest2 : TestStru2[12];
};

@ga : int = 123;
@gb : int[3] = [3,5,1];
@gc = 456;
@gd : string = "this is a test";

hook(CompileTest)
{
	onenter{
		$a = 12;
		$b = 13 * 17;
		$d : int = ptrget(addr($a), 4);
		$e : int[4] = [1,$a,3,$b];
		$c : int;
		$e[1] = $d + $e[2] * $c;
		if ($a==12) {
			$c = $a * $b;
		};
		while($c!=0){
			$c = $c - 1;
		};
		loopi($c,0,3,1){
			$d = $d + 1;
		};
		loopd($c,8,0,-2){
			$d = $d + 1;
			break;
		};
		if($a == 12){
			$d = $d + 1;
		}
		else{
			$d = $d - 1;
		};
		$c = addr($e) + argv(0);
		$d = $c < 1 ? 2 : 3;
		$e[0] = $d ?? 1;
		$f : int = struct($d, ptr(ptr(TestStru3.ptest2).ptest).size);
		$g : int = dumpcascadeptr(addr($e), 0x08, 0x08);
		$h1 : int = offset(TestStru3.ptest2[3].size);
		$h2 : int = size(TestStru3);
		ffi(proto(void,noparams,[int,int],[],[]),0x1234,121,121);
		ffi(proto(void,noparams,[int],[float],[]),0x1235,123,123.00);
		return 0;
	};
};

hook(TestMacro1)
{
	onenter{
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("TestMacro1 enter time:%lld a:%d b:%f c:%s\n",time(),$a,$b,$c);
		
		SetTimeScale(0.0001);
		printf("TimeScale:%f time:%f",GetTimeScale(), floattime());
		WriteLog("test test test");
		FlushLog();
		
		ptrset(argv(0),4,1);
		return 1;
	};
	onexit{
		printf("TestMacro1 exit time:%lld\n",time());
	};
};
hook(TestMacro2)
{
	onenter{
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("TestMacro2 enter time:%lld a:%d b:%f c:%s\n",time(),$a,$b,$c);
		
		return 0;
	};
	onexit{
		printf("TestMacro2 exit time:%lld\n",time());
		ptrset(argv(0),4,2);
	};
};
hook(TestMacro3)
{
	onenter{
		$a:int = ptrget(argv(0),4);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		printf("TestMacro3 enter time:%lld a:%d b:%f c:%s\n",time(),$a,$b,$c);
		
		if(platform()==0){
			//test code on windows
			dumpcascadeptr(argv(2),0);
			if($a==123){
				ptrset(argv(0),4,1);
			}
			else{ 
				ptrset(argv(0),4,0);
			};
			$i:int = 0;
			loop($i,0,10){
				printf("+%d\n",$i);
			};
			$j:float = $i;
			while($j>0){
				printf("-%f\n",$j);
				//$j=$j-1;
				dec($j,2.0);
			};
			printf(">>> %f\n", $j);
			printf(">>> %f\n", inc($j));
			printf(">>> %f\n", inc($j, 2.0));
			printf(">>> %f\n", inc($j, 3.0));
			printf("%d %d %d\n", stkix(), hookid(), hookver());
			printf("str contains %d %d\n", stringcontains("test","es","te"), stringnotcontains("test","es","fg"));
			printf("str contains any %d %d\n", stringcontainsany("test","es","te"), stringnotcontainsany("test","es","fg"));
			printf("str find %d %d\n", stringfind("test","es"), stringrfind("test","es"));
			printf("str find2 %d %d\n", stringfind("test","es",1), stringrfind("test","es",0));
			printf("load:%llx\n", LoadLib("kernel32.dll"));
			printf("proc:%llx\n", LoadLibAndGetProc("user32.dll","MessageBoxA"));
			$addr:int = 0x800010004003;
			printf("%llx\n", $addr & (~0x03));
			CheckMemory(28);
		};

		return 1;
	};
	onexit{
		printf("TestMacro3 exit time:%lld\n",time());
	};
};
hook(TestMacro4)
{
	onenter{
		$a:int = ptrget(argv(0),4);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		printf("TestMacro4 enter time:%lld a:%d b:%f c:%s\n",time(),$a,$b,$c);
		
		return 0;
	};
	onexit{
		printf("TestMacro4 exit time:%lld\n",time());
	};
};

//======test code end======

hook(DbgScp_Set)
{
	onenter{
		$cmd:int = ptrget(argv(0),4);
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("DbgScp_Set enter time:%lld cmd:%d a:%d b:%f c:%s\n",time(),$cmd,$a,$b,$c);
		
		$fields:string[3];
		$seg:int = FindSegment(GetPID(),"libunity.so","r-xp",1,$fields);
		$seg_str:string = format("pid:%d tid:%d unity seg:%llx info:%s %s %s\n",GetPID(),GetTID(),$seg,$fields[0],$fields[1],$fields[2]);
		printf("%s",$seg_str);
		WriteLog($seg_str);
		FlushLog();
		
		if($cmd==1){
			@g_enable_unity_obj_mem_stack_log = 1;
		}
		elif($cmd==2){
			@g_enable_gcalloc_log = 1;
		};
		
		return 1;
	};
	onexit{
		printf("DbgScp_Set exit time:%lld\n",time());
	};
};
hook(DbgScp_Get)
{
	onenter{
		$cmd:int = ptrget(argv(1),4);
		$a:int = ptrget(argv(2),4);
		$b:int = ptrget(argv(3),8);
		$c:int = ptrget(argv(4),8);
		printf("DbgScp_Get enter time:%lld cmd:%d a:%d b:%f c:%s\n",time(),$cmd,$a,$b,$c);
		
		printf("Model:%s gpu:%s ver:%s\n",GetDeviceModel(),GetGpu(),GetGpuVer());
		/*
		loop($i,1,165){
			CheckMemory($i);
		};
		*/
		return 0;
	};
	onexit{
		printf("DbgScp_Get exit time:%lld\n",time());
		ptrset(argv(0),4,2);
	};
};

hook("MonoBehaviour::CallAwake")
{
	onenter{
		$this:int = ptrget(argv(0),8);
		$className:string = ptrget(argv(1),8);
		$fullClassName:string = ptrget(argv(2),8);
		$name:string = ptrget(argv(3),8);
		
		$str:string = format("MonoBehaviour::CallAwake enter time:%lld thread:%d class:%s name:%s\n",time(),GetTID(),$className,$name);
		printf("%s",$str);
		if($className=="MainCameraTag"){
			WriteLog($str);
			dumpstack("#MonoBehaviour::CallAwake");
			LogStack("#MonoBehaviour::CallAwake");
			
			if (@g_run_startup == 0) {
				@g_run_startup = 1;
				CallCSharp("Assembly-CSharp", "", "MoreFunTechStartup", "RunStartup", 0);
			};
		};
	};
	onexit{
		$this:int = ptrget(argv(0),8);
		$className:string = ptrget(argv(1),8);
		$fullClassName:string = ptrget(argv(2),8);
		$name:string = ptrget(argv(3),8);
		
		$str:string = format("MonoBehaviour::CallAwake exit time:%lld thread:%d class:%s name:%s\n",time(),GetTID(),$className,$name);
		printf("%s",$str);
		if($className=="MainCameraTag"){
			WriteLog($str);
		};
	};
};
hook("MonoBehaviour::Start")
{
	onenter{
		$this:int = ptrget(argv(0),8);
		$className:string = ptrget(argv(1),8);
		$fullClassName:string = ptrget(argv(2),8);
		$name:string = ptrget(argv(3),8);
		
		$str:string = format("MonoBehaviour::Start enter time:%lld thread:%d class:%s name:%s\n",time(),GetTID(),$className,$name);
		printf("%s",$str);
		if($className=="MainCameraTag"){
			WriteLog($str);
			dumpstack("#MonoBehaviour::Start");
			LogStack("#MonoBehaviour::Start");
			
			if (@g_run_startup == 0) {
				@g_run_startup = 1;
				CallCSharp("Assembly-CSharp", "", "MoreFunTechStartup", "RunStartup", 0);
			};
		};
	};
	onexit{
		$this:int = ptrget(argv(0),8);
		$className:string = ptrget(argv(1),8);
		$fullClassName:string = ptrget(argv(2),8);
		$name:string = ptrget(argv(3),8);
		
		$str:string = format("MonoBehaviour::Start exit time:%lld thread:%d class:%s name:%s\n",time(),GetTID(),$className,$name);
		printf("%s",$str);		
		if($className=="MainCameraTag"){
			WriteLog($str);
		};
	};
};
hook("ExecuteCommandBufferRenderCommand")
{
	onenter{
		$cmd:int = ptrget(argv(0),4);
		$cmdName:string = ptrget(argv(1),8);
		//printf("ExecuteCommandBufferRenderCommand:%d %s\n", $cmd, $cmdName);
		//dumpstack("#ExecuteCommandBufferRenderCommand");
	};
};
hook("GfxDeviceWorker::RunCommand")
{
	onenter{
		//$ret:int = ptrget(argv(0),4);
		$status:int = ptrget(argv(1),4);
		$cmd:int = ptrget(argv(2),4);
		$cmdName:string = ptrget(argv(3),8);
		
		//printf("GfxDeviceWorker::RunCommand:%d %s\n", $cmd, $cmdName);
		//dumpstack("#GfxDeviceWorker::RunCommand");
	};
};
hook("TaskExecutor::HandleCommandStream")
{
	onenter{
		$this:int = ptrget(argv(0),8);
		$cmdBuf:int = ptrget(argv(1),8);
		$cmdType:int = ptrget(argv(2),4);
		$cmdName:string = ptrget(argv(3),8);
		
		//printf("TaskExecutor::HandleCommandStream cmd:%d %s\n", $cmdType, $cmdName);
		//dumpstack("#TaskExecutor::HandleCommandStream");
	};
};
hook("HookGfxDeviceClient")
{
	onenter{
		$tag:string = ptrget(argv(0),8);
		//printf("HookGfxDeviceClient:%s\n", $tag);
		//dumpstack("#"+$tag);
	};
};
hook("HookGfxDeviceVK")
{
	onenter{
		$tag:string = ptrget(argv(0),8);
		$shader:string = ptrget(argv(1),8);
		//printf("HookGfxDeviceVK:%s shader:%s\n", $tag, $shader);
		//dumpstack("#"+$tag);
	};
};
hook("HookVkCommandBuffer")
{
	onenter{
		$tag:string = ptrget(argv(0),8);
		//printf("HookVkCommandBuffer:%s\n", $tag);
		//dumpstack("#"+$tag);
	};
};

hook("GfxDeviceClient::CreateGpuProgram")
{
	onenter{
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		$d:int = ptrget(argv(3),8);
		$e:string = ptrget(argv(4),8);
		
		$str:string = format("GfxDeviceClient::CreateGpuProgram enter time:%lld thread:%d shader:%s\n",time(),GetTID(),$e);
		printf("%s",$str);
		WriteLog($str);
		//dumpstack("#GfxDeviceClient::CreateGpuProgram");
		//LogStack("#GfxDeviceClient::CreateGpuProgram");
		
		return 0;
	};
	onexit{
		$str:string = format("GfxDeviceClient::CreateGpuProgram exit time:%lld thread:%d\n",time(),GetTID());
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("GfxDeviceClient::CreateComputeProgram")
{
	onenter{
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		$d:string = ptrget(argv(3),8);
		
		$str:string = format("GfxDeviceClient::CreateComputeProgram enter time:%lld thread:%d shader:%s\n",time(),GetTID(),$d);
		printf("%s",$str);
		WriteLog($str);
		//dumpstack("#GfxDeviceClient::CreateComputeProgram");
		//LogStack("#GfxDeviceClient::CreateComputeProgram");
		
		return 0;
	};
	onexit{
		$str:string = format("GfxDeviceClient::CreateComputeProgram exit time:%lld thread:%d\n",time(),GetTID());
		printf("%s",$str);
		WriteLog($str);
	};
};

hook("VKGpuProgram::Create")
{
	onenter{
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		$d:string = ptrget(argv(3),8);
		
		$str:string = format("VKGpuProgram::Create enter time:%lld thread:%d shader:%s\n",time(),GetTID(),$d);
		printf("%s",$str);
		WriteLog($str);
				
		//assert(0);
		//SetTimeScale(0.0001);
		printf("TimeScale:%f time:%f float:%f", GetTimeScale(), floattime(), 0.12345);
		
		return 0;
	};
	onexit{
		$str:string = format("VKGpuProgram::Create exit time:%lld thread:%d\n",time(),GetTID());
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("GraphicsPipelineProvider::GetShaderModule")
{
	onenter{
		$a:int = ptrget(argv(7),8);
		$b:int = ptrget(argv(7)+8,8);
		$str:string = format("GraphicsPipelineProvider::GetShaderModule enter time:%lld thread:%d key:%8.8x %8.8x\n",time(),GetTID(),$a,$b);
		printf("%s",$str);
		WriteLog($str);
		return 0;
	};
	onexit{
		$a:int = ptrget(argv(0),8);
		$str:string = format("GraphicsPipelineProvider::GetShaderModule exit time:%lld thread:%d ret:%x\n",time(),GetTID(),$a);
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("GraphicsPipelineProvider::DeleteShaderModule")
{
	onenter{
		$a:int = ptrget(argv(1),8);
		$str:string = format("GraphicsPipelineProvider::DeleteShaderModule enter time:%lld thread:%d obj:%x\n",time(),GetTID(),$a);
		printf("%s",$str);
		WriteLog($str);
		dumpstack("#GraphicsPipelineProvider::DeleteShaderModule");
		LogStack("#GraphicsPipelineProvider::DeleteShaderModule");
		return 0;
	};
	onexit{
		$str:string = format("GraphicsPipelineProvider::DeleteShaderModule exit time:%lld thread:%d\n",time(),GetTID());
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("GraphicsPipelineProvider::GetPipelineCacheAndLayout")
{
	onenter{
		$str:string = format("GraphicsPipelineProvider::GetPipelineCacheAndLayout enter time:%lld thread:%d\n",time(),GetTID());
		printf("%s",$str);
		WriteLog($str);
		//dumpstack("GraphicsPipelineProvider::GetPipelineCacheAndLayout");
		return 0;
	};
	onexit{
		$a:int = ptrget(argv(0),8);
		$str:string = format("GraphicsPipelineProvider::GetPipelineCacheAndLayout exit time:%lld thread:%d ret:%x\n",time(),GetTID(),$a);
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("GraphicsPipelineProvider::DeletePipelineCacheAndLayout")
{
	onenter{
		$a:int = ptrget(argv(1),8);
		$str:string = format("GraphicsPipelineProvider::DeletePipelineCacheAndLayout enter time:%lld thread:%d obj:%x\n",time(),GetTID(),$a);
		printf("%s",$str);
		WriteLog($str);
		dumpstack("#GraphicsPipelineProvider::DeletePipelineCacheAndLayout");
		LogStack("#GraphicsPipelineProvider::DeletePipelineCacheAndLayout");
		return 0;
	};
	onexit{
		$str:string = format("GraphicsPipelineProvider::DeletePipelineCacheAndLayout exit time:%lld thread:%d\n",time(),GetTID());
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("CreateGraphicsPipeline")
{
	onenter{
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:string = ptrget(argv(2),8);
		$dev:int = ptrget($a, 8);
		$str:string = format("CreateGraphicsPipeline enter time:%lld thread:%d this:%llx device:%llx\n",time(),GetTID(),$a,$dev);
		printf("%s",$str);
		WriteLog($str);
		
		/*
		//MI 12 pro
		//$addr:int = cascadeptr($dev, 8, 0x8, 0x68, 0x1390);
		//printf("this:%llx device:%llx addr:%llx\n", $a, $dev, $addr);
		//$log:int = ptrget($addr+0x140, 8);
		//printf("this:%llx device:%llx log:%d\n", $a, $dev, $log);
		//ptrset($addr+0x140, 8, 1);
		
		//adreno eng
		$addr:int = cascadeptr($dev, 8, 0x8, 0x70, 0x1968);
		printf("this:%llx device:%llx addr:%llx\n", $a, $dev, $addr);
		$log:int = ptrget($addr+0x630, 4);
		printf("this:%llx device:%llx log:%d\n", $a, $dev, $log);
		ptrset($addr+0x630, 4, 1);
		
		//adreno eng vendor scope
		$addr2:int = cascadeptr($dev, 8, 0x8, 0x70, 0x1948, 0x88);
		printf("this:%llx device:%llx addr:%llx\n", $a, $dev, $addr2);
		$log2:int = ptrget($addr2+0xc78, 4);
		printf("this:%llx device:%llx scope log:%d\n", $a, $dev, $log2);
		ptrset($addr2+0xc78, 4, 1);
		
		$fields:string[3];
		$seg:int = FindSegment(GetPID(),"vulkan.adreno.so","r--p",1,$fields);
		printf("pid:%d tid:%d vulkan seg:%llx info:%s %s %s\n",GetPID(),GetTID(),$seg,$fields[0],$fields[1],$fields[2]);
		if ($seg>0 && @g_dir_chged==0) {
			//assert(0);
			
			printf("old dir: %s\n", caststr($seg + 0x04A9D8));
			
			MemoryProtect($seg + 0x040000, 0x10000, 2);
			$tstr:int = castint("/sdcard/Download/");
			$size:int = cstrlen($tstr);
			memcpy($seg + 0x04A9D8, $tstr, $size);
			memcpy($seg + 0x04AB85, $tstr, $size);
			memcpy($seg + 0x04AB97, $tstr, $size);
			memcpy($seg + 0x04B058, $tstr, $size);
			memcpy($seg + 0x04B36D, $tstr, $size);
			memcpy($seg + 0x04B5FD, $tstr, $size);
			memcpy($seg + 0x04BECB, $tstr, $size);
			memcpy($seg + 0x04CAE8, $tstr, $size);
			memcpy($seg + 0x04CBEA, $tstr, $size);
			memcpy($seg + 0x04CC19, $tstr, $size);
			memcpy($seg + 0x04CC2B, $tstr, $size);
			
			@g_dir_chged = 1;			
		};
		*/
		//dumpstack("CreateGraphicsPipeline");
		return 0;
	};
	onexit{
		$str:string = format("CreateGraphicsPipeline exit time:%lld thread:%d\n",time(),GetTID());
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("PipelineStateCollection::PrecachePSOsProgressively")
{
	onenter{
		$a:int = ptrget(argv(1),8);
		$b:int = ptrget(argv(2),4);
		
		$str:string = format("PipelineStateCollection::PrecachePSOsProgressively enter time:%lld thread:%d batch:%d->256\n",time(),GetTID(),$b);
		printf("%s",$str);
		WriteLog($str);
		
		ptrset(argv(2),4,256);
		return 0;
	};
	onexit{
		$r:int = ptrget(argv(0),4);
		$str:string = format("PipelineStateCollection::PrecachePSOsProgressively exit time:%lld thread:%d ret:%d\n",time(),GetTID(),$r);
		printf("%s",$str);
		WriteLog($str);
	};
};
hook("vk::MemoryAllocator::Allocate")
{
	onenter{
	};
	onexit{
		$r:int = ptrget(argv(0),8);
		if($r==0){
			FlushLog();
			assert(0);
		}
		else{
			//printf("vk::AllocMemory: %llx\n", $r);
		};
	};
};
hook("vk::MemoryAllocator::Free")
{
	onenter{
		$addr:int = ptrget(argv(2),8);
		//printf("vk::FreeMemory: %llx\n", $addr);
	};
	onexit{
	};
};
hook("RenderingCommandBufferState::GetAndCheckRT")
{
	onenter{
		/*
		$pindex:int = ptrget(argv(3),4);
		$pname:string = ptrget(argv(4),8);
		$desc:string = ptrget(argv(5),8);
		$bufname:string = ptrget(argv(6),8);
		if ($pindex != -1) {
			printf("GetAndCheckRT index:%d name:%s desc:%s buf:%s\n", $pindex, $pname, $desc, $bufname);
		};
		*/
	};
	onexit{
	};
};
hook("MemoryManager::GetAllocator")
{
	onenter{
		return 0;
	};
	onexit{
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),4);
		if ($a == 0) {
			printf("MemoryManager::GetAllocator memlabel:%d return null\n", $c);
			//dumpstack("MemoryManager::GetAllocator");
		}
		elif ($c == 2) {
			//assert(0);
		}
		elif ($c == 153) {
			//printf("MemoryManager::GetAllocator memlabel:%d allocator\n", $c);
			//dumpstack("MemoryManager::GetAllocator");
			//assert(0);
		}
		elif ($c >= 166) {
			printf("MemoryManager::GetAllocator memlabel:%d use custom allocator\n", $c);
			//dumpstack("MemoryManager::GetAllocator");
		};
	};
};
hook("MemoryManager::GetAllocatorOnNull")
{
	onenter{
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		
		$str:string = format("MemoryManager::GetAllocatorOnNull memlabel:%d return null\n", $b);
		printf("%s",$str);
		WriteLog($str);
		
		//dumpstack("MemoryManager::GetAllocatorOnNull");
		return 0;
	};
	onexit{
	};
};
hook("MemoryManager::Allocate_Temp")
{
	onenter{
		//$ret:int = ptrget(argv(0),8);
		//$this:int = ptrget(argv(2),8);
		$size:int = ptrget(argv(3),8);
		$align:int = ptrget(argv(4),8);
		//$label:int = ptrget(argv(5),4);
		//$option:int = ptrget(argv(6),4);
		//$file:string = ptrget(argv(7),8);
		//$line:int = ptrget(argv(8),4);
		//$retry:int = ptrget(argv(9),4);
		//$enableTemp:int = ptrget(argv(10),4);
		
		if($size>=32){
			ptrset(argv(10),4,0);
		};
	};
	onexit{
		//$addr:int = ptrget(argv(1),8);
		//$this:int = ptrget(argv(2),8);
		//$size:int = ptrget(argv(3),8);
		//$align:int = ptrget(argv(4),8);
		//$label:int = ptrget(argv(5),4);
		//$option:int = ptrget(argv(6),4);
		//$file:string = ptrget(argv(7),8);
		//$line:int = ptrget(argv(8),4);
		
		//$str:string = format("MemoryManager::Allocate_Temp time:%lld size:%lld align:%lld label:%d opt:%d addr:%llx tid:%d file:%s line:%d\n",time(),$size,$align,$label,$option,$addr,GetTID(),$file,$line);
		//printf("%s",$str);
		//WriteLog($str);
	};
};
hook("MemoryManager::Allocate_NonTemp")
{
	onenter{
		//$ret:int = ptrget(argv(0),8);
		//$retry:int = ptrget(argv(9),4);
		//$enableNonTemp:int = ptrget(argv(10),4);
	};
	onexit{
		$addr:int = ptrget(argv(1),8);
		$this:int = ptrget(argv(2),8);
		$size:int = ptrget(argv(3),8);
		$align:int = ptrget(argv(4),8);
		$label:int = ptrget(argv(5),4);
		$option:int = ptrget(argv(6),4);
		$file:string = ptrget(argv(7),8);
		$line:int = ptrget(argv(8),4);
		
		$tid:int = GetTID();
		
		if(@g_enable_mem_log>0){
			$str:string = format("MemoryManager::Allocate_NonTemp time:%lld size:%lld align:%lld label:%d opt:%d addr:%llx tid:%d file:%s line:%d\n",time(),$size,$align,$label,$option,$addr,$tid,$file,$line);
			printf("%s",$str);
			WriteLog($str);
		};
		
		if($addr==0){
		}
		else{
			if(stringcontains($file,"VKAsyncPipelineCompiler.cpp") && $line==272 && @g_enable_watch_point){
				$info_size:int;
				$info_align:int;
				$info_locking:int;
				$info_tlsf:int;
				$info_tlsf_inst:int;
				$info_tlsf_pool:int;
				$info_tid:int;
				$info_main_thread:int;
				$cur_tid:int;
				$cur_main_thread:int;
				$alloc_name:string;
				$second_alloc_name:string;
				
				if(GetMemoryInfo($addr,$info_size,$info_align,$info_locking,$info_tlsf,$info_tlsf_inst,$info_tlsf_pool,$info_tid,$info_main_thread,$cur_tid,$cur_main_thread,$alloc_name,$second_alloc_name) && $info_tlsf){
					$str2:string = format("MemoryManager::Allocate_NonTemp_NotNull add watch point time:%lld addr:%llx size:%lld tid:%d\n",time(),$addr,$size,$tid);
					printf("%s",$str2);
					WriteLog($str2);
					AddMemoryFlag($addr, 2);
					FlushLog();
					
					//SetWatchPoint(cmd,flag,size,addr,tid); cmd:1--add 2--remove flag:1--read 2--write 3--readwrite
					SetWatchPoint(1,2,8,$addr-0x28,$tid);
					//bp to notify lldb
					assert(0);
				};			
			}
			else{
				AddMemoryFlag($addr, 1);
			};
		};
	};
};
hook("MemoryManager::Deallocate_Temp")
{
	onenter{
		//$this:int = ptrget(argv(0),8);
		//$addr:int = ptrget(argv(1),8);
		//$label:int = ptrget(argv(2),4);
		//$file:string = ptrget(argv(3),8);
		//$line:int = ptrget(argv(4),4);
	};
};
hook("MemoryManager::Deallocate_NonTemp")
{
	onenter{
		$this:int = ptrget(argv(0),8);
		$addr:int = ptrget(argv(1),8);
		$label:int = ptrget(argv(2),4);
		$file:string = ptrget(argv(3),8);
		$line:int = ptrget(argv(4),4);
		
		if(@g_enable_mem_log>0){
			$info_size:int;
			$info_align:int;
			$info_locking:int;
			$info_tlsf:int;
			$info_tlsf_inst:int;
			$info_tlsf_pool:int;
			$info_tid:int;
			$info_main_thread:int;
			$cur_tid:int;
			$cur_main_thread:int;
			$alloc_name:string;
			$second_alloc_name:string;
			
			if(GetMemoryInfo($addr,$info_size,$info_align,$info_locking,$info_tlsf,$info_tlsf_inst,$info_tlsf_pool,$info_tid,$info_main_thread,$cur_tid,$cur_main_thread,$alloc_name,$second_alloc_name)){
				$str:string = format("MemoryManager::Deallocate_NonTemp ptr:%llx label:%d tid:%d main thread:%d alloc name:%s second alloc name:%s file:%s line:%d\n",$addr,$label,$cur_tid,$cur_main_thread,$alloc_name,$second_alloc_name,$file,$line);
				printf("%s",$str);
				WriteLog($str);
			}
			else{			
				$str:string = format("MemoryManager::Deallocate_NonTemp this:%llx addr:%llx label:%lld file:%s line:%lld\n", $this, $addr, $label, $file, $line);
				printf("%s",$str);
				WriteLog($str);
			};
		};
	};
};
hook("MemoryManager::Deallocate")
{
	onenter{
		//$this:int = ptrget(argv(0),8);
		$addr:int = ptrget(argv(1),8);
		$strInt:int = ptrget(argv(2),8);		
		$file:string = "";
		if($strInt){
			$file = caststr($strInt);
		};
		$line:int = ptrget(argv(3),4);
		
		if(@g_enable_mem_log>0){
			$info_size:int;
			$info_align:int;
			$info_locking:int;
			$info_tlsf:int;
			$info_tlsf_inst:int;
			$info_tlsf_pool:int;
			$info_tid:int;
			$info_main_thread:int;
			$cur_tid:int;
			$cur_main_thread:int;
			$alloc_name:string;
			$second_alloc_name:string;
			
			if(GetMemoryInfo($addr,$info_size,$info_align,$info_locking,$info_tlsf,$info_tlsf_inst,$info_tlsf_pool,$info_tid,$info_main_thread,$cur_tid,$cur_main_thread,$alloc_name,$second_alloc_name)){
				$str:string = format("MemoryManager::Deallocate ptr:%llx tid:%d main thread:%d alloc name:%s second alloc name:%s file:%s line:%d\n",$addr,$cur_tid,$cur_main_thread,$alloc_name,$second_alloc_name,$file,$line);
				printf("%s",$str);
				WriteLog($str);
			};
		};
	};
	onexit{
		
	};
};
hook("LogOnTlsfAssert")
{
	onenter{
		LogStack("LogOnTlsfAssert");
		assert(0);
	};
	onexit{
	};
};
hook("LogOnTlsfMemory")
{
	onenter{
		$ptr:int = ptrget(argv(0),8);
		$str:string = format("LogOnTlsfMemory ptr:%llx\n",$ptr);
		printf("%s",$str);
		WriteLog($str);
		LogStack("LogOnTlsfMemory");
		assert(0);
	};
	onexit{
	};
};
hook("DynamicHeapAllocator::AllocateByBucket")
{
	onenter{
		//$ret:int = ptrget(argv(0),8);
		//$addr:int = ptrget(argv(1),8);
		//$this:int = ptrget(argv(2),8);
		$size:int = ptrget(argv(3),8);
		$align:int = ptrget(argv(4),4);
		//$enableBucket:int = ptrget(argv(5),4);
		
		if($size>=32){
			ptrset(argv(5),1,0);
		};
	};
	onexit{
		//$addr:int = ptrget(argv(1),8);
		//$this:int = ptrget(argv(2),8);
		//$size:int = ptrget(argv(3),8);
		//$align:int = ptrget(argv(4),4);
	};
};
hook("DynamicHeapAllocator::Allocate")
{
	onenter{
		$this:int = ptrget(argv(1),8);
		$size:int = ptrget(argv(2),8);
		$align:int = ptrget(argv(3),4);
		$locking:int = ptrget(argv(4),1);
		$tlsfInst:int = ptrget(argv(6),8);
		$tlsfPool:int = ptrget(argv(7),8);
		$allocSize:int = ptrget(argv(8),8);
		$allocAlign:int = ptrget(argv(9),4);
		
		if(@g_enable_mem_log>0){
			if($size>=32){
				$str:string = format("DynamicHeapAllocator::Allocate enter time:%lld align:%d locking:%d size:%lld alloc_size:%lld alloc_align:%d inst:%llx pool:%llx tid:%d\n",time(),$align,$locking,$size,$allocSize,$allocAlign,$tlsfInst,$tlsfPool,GetTID());
				printf("%s",$str);
				WriteLog($str);
			};
		};
	};
	onexit{
		$addr:int = ptrget(argv(0),8);
		$this:int = ptrget(argv(1),8);
		$size:int = ptrget(argv(2),8);
		$align:int = ptrget(argv(3),4);
		$locking:int = ptrget(argv(4),1);
		$tlsf:int = ptrget(argv(5),1);
		$tlsfInst:int = ptrget(argv(6),8);
		$tlsfPool:int = ptrget(argv(7),8);
		$allocSize:int = ptrget(argv(8),8);
		$allocAlign:int = ptrget(argv(9),4);
		
		//if(@g_enable_mem_log>0){
		//	if($size>=32){
		//		$str:string = format("DynamicHeapAllocator::Allocate exit time:%lld align:%d locking:%d tlsf:%d addr:%llx size:%lld alloc_size:%lld alloc_align:%d inst:%llx pool:%llx tid:%d\n",time(),$align,$locking,$tlsf,$addr,$size,$allocSize,$allocAlign,$tlsfInst,$tlsfPool,GetTID());
		//		printf("%s",$str);
		//		WriteLog($str);
		//	};
		//};
		
		AddMemoryInfo($addr,$size,$align,$locking,$tlsf,$tlsfInst,$tlsfPool);
	};
};
hook("DynamicHeapAllocator::Deallocate")
{
	onenter{
		$this:int = ptrget(argv(0),8);
		$addr:int = ptrget(argv(1),8);
		$size:int = ptrget(argv(2),8);
		$locking:int = ptrget(argv(3),1);
		$tlsf:int = ptrget(argv(4),1);
		$tlsfInst:int = ptrget(argv(5),8);
		$tlsfPool:int = ptrget(argv(6),8);
		
		$tid:int = GetTID();
		
		if(@g_enable_mem_log>0){
			if($size>=32){
				$str:string = format("DynamicHeapAllocator::Deallocate enter time:%lld locking:%d tlsf:%d addr:%llx size:%lld inst:%llx pool:%llx tid:%d\n",time(),$locking,$tlsf,$addr,$size,$tlsfInst,$tlsfPool,$tid);
				printf("%s",$str);
				WriteLog($str);
			};
			
			$info_size:int;
			$info_align:int;
			$info_locking:int;
			$info_tlsf:int;
			$info_tlsf_inst:int;
			$info_tlsf_pool:int;
			$info_tid:int;
			$info_main_thread:int;
			$cur_tid:int;
			$cur_main_thread:int;
			$alloc_name:string;
			$second_alloc_name:string;
			
			$flag:int;
			GetMemoryFlag($addr,$flag);
			
			if(GetMemoryInfo($addr,$info_size,$info_align,$info_locking,$info_tlsf,$info_tlsf_inst,$info_tlsf_pool,$info_tid,$info_main_thread,$cur_tid,$cur_main_thread,$alloc_name,$second_alloc_name)){
				$str2:string = format("DynamicHeapAllocator::Deallocate flag==%d locking:%d tlsf:%d addr:%llx size:%lld inst:%llx pool:%llx tid:%d main thread:%d cur inst:%llx cur pool:%llx cur tid:%d cur main thread:%d alloc name:%s second alloc name:%s\n",$flag,$info_locking,$info_tlsf,$addr,$info_size,$info_tlsf_inst,$info_tlsf_pool,$info_tid,$info_main_thread,$tlsfInst,$tlsfPool,$cur_tid,$cur_main_thread,$alloc_name,$second_alloc_name);
				printf("%s",$str2);
				WriteLog($str2);
			}
			elif($flag>0){
				$str2:string = format("DynamicHeapAllocator::Deallocate flag==%d time:%lld locking:%d tlsf:%d addr:%llx size:%lld inst:%llx pool:%llx tid:%d\n",$flag,time(),$locking,$tlsf,$addr,$size,$tlsfInst,$tlsfPool,$tid);
				printf("%s",$str2);
				WriteLog($str2);
			};
					
			if($flag==2 && @g_enable_watch_point){
				$str2:string = format("DynamicHeapAllocator::Deallocate remove watch point time:%lld addr:%llx size:%lld tid:%d\n",time(),$addr,$size,$tid);
				printf("%s",$str2);
				WriteLog($str2);
				FlushLog();
				//SetWatchPoint(cmd,flag,size,addr,tid); cmd:1--add 2--remove flag:1--read 2--write 3--readwrite
				SetWatchPoint(2,2,8,$addr-0x28,$tid);
				//bp to notify lldb
				assert(0);
			};
		};
		
		RemoveMemoryInfo($addr);
		RemoveMemoryFlag($addr);
	};
	onexit{
		$this:int = ptrget(argv(0),8);
		$addr:int = ptrget(argv(1),8);
		$size:int = ptrget(argv(2),8);
		$locking:int = ptrget(argv(3),1);
		$tlsf:int = ptrget(argv(4),1);
		$tlsfInst:int = ptrget(argv(5),8);
		$tlsfPool:int = ptrget(argv(6),8);
		
		//if(@g_enable_mem_log>0){
		//	if($size>=32){
		//		$str:string = format("DynamicHeapAllocator::Deallocate exit time:%lld locking:%d tlsf:%d addr:%llx size:%lld inst:%llx pool:%llx tid:%d\n",time(),$locking,$tlsf,$addr,$size,$tlsfInst,$tlsfPool,GetTID());
		//		printf("%s",$str);
		//		WriteLog($str);
		//	};
		//};
	};
};
hook("CheckVulkanSupportImpl")
{
	onenter{
		printf("begin CheckVulkanSupportImpl");
	};
	onexit{
		$result:int = ptrget(argv(0),4);
		$gpu:string = ptrget(argv(1),8);
		$gpuStr:int = ptrget(argv(2),8);
		$api:int = ptrget(argv(3),4);
		$driver:int = ptrget(argv(3)+4,4);
		$vendor:int = ptrget(argv(3)+8,4);
		$devId:int = ptrget(argv(3)+12,4);
		$devType:int = ptrget(argv(3)+16,4);
		$sdkInt:int = ptrget(argv(4),4);
		printf("end CheckVulkanSupportImpl result:%d gpu:%s(%x) api:0x%x driver:0x%x vendor:0x%x device:0x%x type:%u sdk:%u", $result, $gpu, $gpuStr, $api, $driver, $vendor, $devId, $devType, $sdkInt);
	};
};
hook("CommandBuffer::BeginRenderPass")
{
	onenter{
		//printf("CommandBuffer::BeginRenderPass\n");
		//assert(0);
	};
};
hook("CommandBuffer::EndRenderPass")
{
	onenter{
		//printf("CommandBuffer::EndRenderPass\n");
		//assert(0);
	};
};
hook("CommandBuffer::DrawIndexed")
{
	onenter{
		//printf("CommandBuffer::DrawIndexed\n");
		//assert(0);
	};
};
hook("CommandBuffer::Draw")
{
	onenter{
		//printf("CommandBuffer::Draw\n");
		//assert(0);
	};
};
hook("CommandBuffer::DrawIndexedIndirect")
{
	onenter{
		//printf("CommandBuffer::DrawIndexedIndirect\n");
		//assert(0);
	};
};
hook("CommandBuffer::DrawIndirect")
{
	onenter{
		//printf("CommandBuffer::DrawIndirect\n");
		//assert(0);
	};
};
hook("CommandBuffer::Dispatch")
{
	onenter{
		//printf("CommandBuffer::Dispatch\n");
		//assert(0);
	};
};
hook("CommandBuffer::DispatchIndirect")
{
	onenter{
		//printf("CommandBuffer::DispatchIndirect\n");
		//assert(0);
	};
};
hook("GfxDeviceClient::Clear")
{
	onenter{
		//assert(0);
	};
};
hook("GfxDeviceClient::ClearMRT")
{
	onenter{
		//assert(0);
	};
};
hook("CommandBuffer::ClearDepthStencil")
{
	onenter{
		//assert(0);
	};
};
hook("CommandBuffer::ClearColor")
{
	onenter{
		//pThis, image, imageLayout, color, rangeCount, ranges
		$this:int = ptrget(argv(0),8);
		$image:int = ptrget(argv(1),8);
		$imageLayout:int = ptrget(argv(2),4);
		$colors:int = argv(3);
		$color1:int = ptrget(argv(3),4);
		$color2:int = ptrget(argv(3)+4,4);
		$color3:int = ptrget(argv(3)+8,4);
		$color4:int = ptrget(argv(3)+12,4);
		$rangeCount:int = ptrget(argv(4),4);
		$ranges:int = ptrget(argv(5),8);
				
		printf("CommandBuffer::ClearColor this:%llx img:%llx layout:%u colors:%llx color:%f %f %f %f rangeCount:%u ranges:%llx\n", $this, $image, $imageLayout, $colors, $color1, $color2, $color3, $color4, $rangeCount, $ranges);
		
		//dumpstack("#CommandBuffer::ClearColor");
		//assert(0);
		
		//ptrset(argv(3),8,0);
		//ptrset(argv(3)+8,8,0);
	};
};
hook("Object::GetRuntimeMemorySize")
{
	onexit{
		$result:int = ptrget(argv(0),8);
		$objId:int = ptrget(argv(1),4);
		$labelId:int = ptrget(argv(2),4);
		$rootIndex:int = ptrget(argv(3),4);
		$salt:int = ptrget(argv(4),4);
		
		//$str:string = format("GetRuntimeMemorySize result:%lld objid:%d label:%d root_index:%d salt:%d\n", $result, $objId, $labelId, $rootIndex, $salt);
		//printf("%s",$str);
		//WriteLog($str);
	};
};
hook("AllocationRootReference::AddReference")
{
	onenter{
		$areaName:string = ptrget(argv(0),8);
		$objName:string = ptrget(argv(1),8);
		$rootIndex:int = ptrget(argv(2),4);
		$salt:int = ptrget(argv(3),4);
		$accumulatedSize:int = ptrget(argv(4),8);
		$size:int = ptrget(argv(5),8);
		$labelId:int = ptrget(argv(6),4);
		$line:int = ptrget(argv(7),4);
		$file:string = ptrget(argv(8),8);
		
		//$str:string = format("AllocationRootReference::AddReference area:%s name:%s root_index:%d salt:%d accumulatedSize:%lld size:%lld label:%d line:%d file:%s\n", $areaName, $objName, $rootIndex, $salt, $accumulatedSize, $size, $labelId, $line, $file);
		//printf("%s",$str);
		//WriteLog($str);
		
		if(@g_enable_unity_obj_mem_stack_log){
			LogStack("#AllocationRootReference::AddReference");
		};
	};
};
hook("AllocationRootReference::RemoveReference")
{
	onenter{
		$areaName:string = ptrget(argv(0),8);
		$objName:string = ptrget(argv(1),8);
		$rootIndex:int = ptrget(argv(2),4);
		$salt:int = ptrget(argv(3),4);
		$accumulatedSize:int = ptrget(argv(4),8);
		$size:int = ptrget(argv(5),8);
		$labelId:int = ptrget(argv(6),4);
		
		//$str:string = format("AllocationRootReference::RemoveReference area:%s name:%s root_index:%d salt:%d accumulatedSize:%lld size:%lld label:%d\n", $areaName, $objName, $rootIndex, $salt, $accumulatedSize, $size, $labelId);
		//printf("%s",$str);
		//WriteLog($str);
	};
};
hook("sample_allocation")
{
	onenter{
		$objSize:int = ptrget(argv(0),4);
		$usedHeap:int = ptrget(argv(1),8);
		$heapSize:int = ptrget(argv(2),8);
		$className:string = ptrget(argv(3),8);
		$objStr:string = ptrget(argv(4),8);
		$objStrLen:int = ptrget(argv(5),8);
		
		if(@g_enable_gcalloc_log){
			$str:string = format("sample_allocation class:%s str:%s str_len:%lld obj_size:%d used_heap:%lld heap_size:%lld\n", $className, $objStr, $objStrLen, $objSize, $usedHeap, $heapSize);
			printf("%s",$str);
			WriteLog($str);
		}
		else{
			//$str:string = format("sample_allocation class:%s str:%s str_len:%lld obj_size:%d used_heap:%lld heap_size:%lld\n", $className, $objStr, $objStrLen, $objSize, $usedHeap, $heapSize);
			//printf("%s",$str);
			//WriteLog($str);
		};
	};
};
hook("gc_resize_event")
{
	onenter{
		$newSize:int = ptrget(argv(0),8);
		$usedHeap:int = ptrget(argv(1),8);
		$heapSize:int = ptrget(argv(2),8);
		
		if(@g_enable_gcalloc_log){
			$str:string = format("gc_resize_event new_size:%lld used_heap:%lld heap_size:%lld\n", $newSize, $usedHeap, $heapSize);
			printf("%s",$str);
			WriteLog($str);
		}
		else{
			$str:string = format("gc_resize_event new_size:%d used_heap:%lld heap_size:%lld\n", $newSize, $usedHeap, $heapSize);
			printf("%s",$str);
			$r:int = WriteLog($str);
			printf("WriteLog:%d\n",$r);
			FlushLog();
		};
	};
};
hook("Mesh::UploadMeshData")
{
	onenter{
		//$forceUnload:int = ptrget(argv(0),1);
		$markNoLongerReadable:int = ptrget(argv(1),1);
		$isReadable:int = ptrget(argv(2),1);
		$name:string = ptrget(argv(3),8);
		
		//ptrset(argv(0), 1, 0);
				
		$str:string = format("Mesh::UploadMeshData markNoLongerReadable:%d isReadable:%d name:%s\n", $markNoLongerReadable, $isReadable, $name);
		printf("%s",$str);
		$r:int = WriteLog($str);
		printf("WriteLog:%d\n",$r);
		
		if(!$isReadable){
			dumpstack("#Mesh::UploadMeshData");
			LogStack("#Mesh::UploadMeshData");
			FlushLog();
		};
		
		if($name=="fengBaoBao_9008_low_skin"){
			assert(0);
		};
	};
};
hook("VertexData::HookHasOrGetData")
{
	onenter{
		$isGet:int = ptrget(argv(0),1);
		$cached:int = ptrget(argv(1),1);
		$dataPtr:int = ptrget(argv(2),8);
		$dataSize:int = ptrget(argv(3),8);
		
		if($cached && !$dataPtr){
			$str:string = format("VertexData::HookHasOrGetData isGet:%d cached:%d dataPtr:%8.8x dataSize:%lld\n", $isGet, $cached, $dataPtr, $dataSize);
			printf("%s",$str);
			$r:int = WriteLog($str);
			printf("WriteLog:%d\n",$r);
			dumpstack("#VertexData::HookHasOrGetData");
			LogStack("#VertexData::HookHasOrGetData");
			FlushLog();
		};
	};
};
hook("HookGetBoneWeightsNull")
{
	onenter{
		$retPos:int = ptrget(argv(0),4);
		$bonesPerVertex:int = ptrget(argv(1),4);
		
		$str:string = format("HookGetBoneWeightsNull retPos:%d bonesPerVertex:%d\n", $retPos, $bonesPerVertex);
		printf("%s",$str);
		WriteLog($str);
		$r:int = WriteLog($str);
		printf("WriteLog:%d\n",$r);
		
		assert(0);
	};
};
hook("InitializeIl2CppFromMain")
{
	onenter{
		$monoPath:string = ptrget(argv(1),8);
		$dataPath:string = ptrget(argv(2),8);
		
		printf("InitializeIl2CppFromMain mono:%s data:%s\n",$monoPath,$dataPath);
		assert(0);
	};
};
hook("Il2CppMonoMemory_mmap")
{
	onenter{
		$capacity:int = ptrget(argv(0),4);
		$mlock:int = ptrget(argv(1),1);
		
		printf("Il2CppMonoMemory_mmap capacity:%d mlock:%d\n",$capacity,$mlock);
		assert(0);
	};
};